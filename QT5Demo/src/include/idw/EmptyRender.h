#ifndef __IDW_EMPTYRENDER_H_
#define __IDW_EMPTYRENDER_H_

#pragma  once
#include "IdwUIDefine.h"

using namespace idw;

//----------------------------------------------------------------------------------------
//名称: 空的接口，所有的接口都没有实现，其余的接口可以从它进行继承
//----------------------------------------------------------------------------------------
class CLASSEXPORT EmptyRender : public IIdwRender
{
public:
	EmptyRender();
	virtual ~EmptyRender();

	//----------------------------------------------------------------------------------------
	//名称: SetEdit
	//描述: 设置渲染引擎对应的控件
	//参数:	
	//		@param	pIdwEdit					控件指针
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(void) SetEdit(IIdwEdit* pIdwEdit);

	//----------------------------------------------------------------------------------------
	//名称: OnGetBorderSize
	//描述: 返回边框的宽度。如果要设置边框的宽度，只需要直接返回就可以了。
	//返回:	
	//		@param	返回当前控件的边框的宽度
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(INT) OnGetBorderSize() ;

	//----------------------------------------------------------------------------------------
	//名称: OnGetRenderCode
	//描述: 当前渲染引擎需要处理绘制的类型
	//返回:	返回为RC_XXX类型定义
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(INT) OnGetRenderCode();

	//----------------------------------------------------------------------------------------
	//名称: OnPaintEx
	//描述: 用户全自定义绘制接口，大部分用户不会使用到该接口，如果用户需要实现
	//		下面的特殊需求，则需要实现该接口：
	//		1、绘制编辑框中的*密码，如果想换成位图，或者其余的自定的圆点
	//		2、绘制编辑框中的光标
	//参数:	
	//		@param	dc								绘制的dc设备环境
	//		@param	nTextNum					当前总的字符数目
	//		@param	nCursorPos				当前光标的位置，即在第几个字符后面
	//返回:
	//		如果OnPaintEx返回DECLINED，则意味着该Render实现不需要扩展绘制接口
	//		否则它就需要调用该绘制接口，此时必须返回OK
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(ERValue) OnPaintEx(HDC dc, int nTextNum, int nCursorPos);

	//----------------------------------------------------------------------------------------
	//名称: OnGetCharPosByXY
	//描述: 对于像AirPlay这样的一些应用程序，他们的光标也是完全进行自绘，而不是使用系统提供的
	//			字符，比如*或者圆点符号。因此一个字符的宽度只有AirPlay应用程序自身才知道。因此，
	//			对于一些操作，比如在编辑框中按下鼠标，如果需要将光标定位到合适的位置，则必须由
	//			调用者来进行通知。
	//参数:
	//		@param	x								鼠标按下的x坐标
	//		@param	y								鼠标按下的y坐标
	//返回:
	//		如果xy坐标在编辑框的有效点击范围内，则返回在第几个字符之后
	//		如果xy在无效范围之内，则返回-1。IDW不需要做任何的处理
	//		如果应用程序不需要接管该接口，则直接返回-2。
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(int) OnGetCharPosByXYEx(int x, int y);

	//----------------------------------------------------------------------------------------
	//名称: OnDrawBorder
	//描述: 对应的是WM_NCPAINT消息，当绘制边框的时候该接口将被调用。应用程序
	//		可以实现自己的边框绘制函数。比如当鼠标进入时候显示一种边框，而当失去焦点
	//		时候又绘制另外一种边框
	//参数:	
	//		@param	dc					绘制边框的dc环境
	//返回: 如果OnPaint返回TRU
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(void) OnDrawBorder(HDC dc);

	//----------------------------------------------------------------------------------------
	//名称: OnDrawBackground
	//描述: 对应的是WM_ERASEBACKGROUND消息，当控件响应WM_ERASEBACKGROUND消息的时候
	//OnDrawBackground函数将被调用。该接口用来绘制控件的背景
	//参数:	
	//		@param	dc					编辑控件的dc环境供进行绘制
	//返回: 具体的返回码
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(void) OnDrawBackground(HDC dc);

	//----------------------------------------------------------------------------------------
	//名称: OnDrawCaret
	//描述: 提供应用程序以机会来修改光标的操作。在创建光标后，应用程序无需调用
	//		ShowCaret()进行显示。
	//参数:	
	//		@param	dc					绘制光标的设备环境。
	//返回: 具体的返回码
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(void) OnDrawCaret(HDC dc);

	//----------------------------------------------------------------------------------------
	//名称: OnSetFocus
	//描述: 对应的是WM_SET_FOCUS消息，当控件获取焦点的时候将会触发该接口，之所
	//		以提供OnSetFocus和OnKillFocus，是因为一些引用希望在获取焦点和失去焦点
	//		的时候能够增加一些自定义的行为，比如切换控件的背景等等
	//返回: 具体的返回码
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(void) OnSetFocus();

	//----------------------------------------------------------------------------------------
	//名称: OnKillFocus
	//描述: 对应的是WM_KILL_FOCUS消息，当控件失去焦点的时候将会触发该接口，之所
	//		以提供OnSetFocus和OnKillFocus，是因为一些引用希望在获取焦点和失去焦点
	//		的时候能够增加一些自定义的行为，比如切换控件的背景等等
	//返回: 具体的返回码
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(void) OnKillFocus();

	//----------------------------------------------------------------------------------------
	//名称: OnMouseMove
	//描述: 对应的是WM_MOUSE_MOVE消息，当鼠标移动到控件之上的时候将触发该事件
	//返回: 具体的返回码
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(void) OnMouseMove(UINT nFlags, POINT point);

	//----------------------------------------------------------------------------------------
	//名称: OnMouseLeave
	//描述: 对应的是WM_MOUSE_LEAVE消息，当鼠标离开鼠标的时候将触发该消息
	//返回: 具体的返回码
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(void) OnMouseLeave();

	//----------------------------------------------------------------------------------------
	//名称: OnOpenCapital
	//描述: 如果当前打开了大写输入键，则会调用该接口。有的应用程序需要在大写输入的时候进行
	//			必要的提示，因此外部程序必须有机会获知该事件
	//返回: 具体的返回码
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(void) OnOpenCapital(BOOL bOpenCapital);

	//----------------------------------------------------------------------------------------
	//名称: OnEscKeyDown
	//描述: 如果在控件中输入了ESC的键，则允许用户进行处理。有的时候用户需要对输入的键
	//			进行一些特殊的处理，比如在密码控件中输入了回车键，则执行类似于确定的操作，
	//			因此必须提供接口供他们使用。
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(ERValue) OnEscKeyDown();

	//----------------------------------------------------------------------------------------
	//名称: OnTabKeyDown
	//描述: 如果在控件中输入了TAB的键，则允许用户进行处理。有的时候用户需要对输入的键
	//			进行一些特殊的处理，比如在密码控件中输入了回车键，则执行类似于确定的操作，
	//			因此必须提供接口供他们使用。
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(ERValue) OnTabKeyDown();

	//----------------------------------------------------------------------------------------
	//名称: OnTabKeyDown
	//描述: 如果在控件中输入了TAB的键，则允许用户进行处理。有的时候用户需要对输入的键
	//			进行一些特殊的处理，比如在密码控件中输入了回车键，则执行类似于确定的操作，
	//			因此必须提供接口供他们使用。
	//----------------------------------------------------------------------------------------
	SNDAMETHOD(ERValue) OnEnterKeyDown();

protected:
		IIdwEdit*	m_pIdwEdit;
};

#endif