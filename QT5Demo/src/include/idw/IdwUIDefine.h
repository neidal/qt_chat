#pragma once

#include "SndaBase.h"
#include <Exdisp.h>

namespace idw
{
	interface IIdwEdit;

	

#define RCODE_NONE			0x00000001				//	没有要特别自绘的内容
#define RCODE_PSDCHAR	0x00000010				//	显示的密码字符需要自绘。正常情况下密码框中的密码文字为文本字符，比如*或者圆圈字符
																			// 但是如果需要替换为自定的绘制图案或者位图等等，则此时就必须在OnGetRenderCode中返
																			//	回该Code，类似于MFC中的OnGetDlgCode
#define RCODE_CURSOR		0x00000100				//	显示的光标需要特别自绘。如果程序需要自行绘制光标，则需要返回该Code


	enum ERValue
	{
		OK,
		DECLINED,
	};

 	//----------------------------------------------------------------------------------------
	// Idw的存储接口，用以存储必要的数据，比如是否记住密码，是否进行自动登录等等。
	// 实现 IIdwRender的几个渲染接口
	//----------------------------------------------------------------------------------------
	interface IIdwStore
	{
		//=====================================================
		//											记住密码相关的内容
		//=====================================================
		//----------------------------------------------------------------------------------------
		//名称: SetRememberPassword
		//描述: 设置给定的账号需要记住密码
		//参数:	
		//		@param	szSndaAccount			需要记住的盛大帐号。当前编辑框的密码将和该帐号关联起来。
		//		@param	bRemember				TRUE表示需要记住密码，FALSE表示不需要记住密码
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) SetRememberPassword(
														IN const wchar_t* szSndaAccount, 
														IN BOOL bRemember) PURE;

		//----------------------------------------------------------------------------------------
		//名称: IsRememberPassword
		//描述: 对给定的盛大帐号是否需要记住密码
		//参数:	
		//		@param	szSndaAccount			需要记住的盛大帐号。当前编辑框的密码将和该帐号关联起来。
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) IsRememberPassword(IN const wchar_t* szSndaAccount) PURE;

		//----------------------------------------------------------------------------------------
		//名称: CancelRememberPassword
		//描述: 清除给定帐号的记住的密码。如果要清除自动登录，也可以直接调用该接口。
		//参数:	
		//		@param	szSndaAccount			需要显示密码的盛大帐号
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) CancelRememberPassword(IN const wchar_t* szSndaAccount) PURE;

		//=====================================================
		//											自动登录相关的内容
		//=====================================================
		//----------------------------------------------------------------------------------------
		//名称: SetAutoLogin
		//描述: 设置给定的账号是否需要自动登录
		//参数:	
		//		@param	szSndaAccount			需要自动登录的账号。当前编辑框的密码将和该帐号关联起来。
		//		@param	bAutoLogin				TRUE表示需要自动登录，FALSE表示不需要自动登录
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) SetAutoLogin(
													IN const wchar_t* szSndaAccount, 
													IN BOOL bAutoLogin) PURE;

		//----------------------------------------------------------------------------------------
		//名称: IsAutoLogin
		//描述: 对给定的盛大帐号是否需要自动登录
		//参数:	
		//		@param	szSndaAccount			需要自动登录的盛大帐号。当前编辑框的密码将和该帐号关联起来。
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) IsAutoLogin(IN const wchar_t* szSndaAccount) PURE;

		//----------------------------------------------------------------------------------------
		//名称: CancelAutoLogin
		//描述: 取消自动登录的功能。
		//参数:	
		//		@param	szSndaAccount			需要取消登录的的盛大帐号
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) CancelAutoLogin(IN const wchar_t* pszSndaAccount) PURE;	
	};

	//----------------------------------------------------------------------------------------
	//名称: sdoaCreateIdwStore
	//描述: 创建一个IIdwStore对象以便进行数据存储。
	//----------------------------------------------------------------------------------------
	SNDADLLAPI IIdwStore* SNDACALL sdoaCreateIdwStore();

	//----------------------------------------------------------------------------------------
	//名称: sdoaReleaseIdwStore
	//描述: 通过sdoaCreateIdwStore创建的对象必须通过sdoaReleaseIdwStore释放，否则
	// 会造成内存泄露。
	//参数:	
	//		@param	pIdwStore			需要被释放的存储对象
	//----------------------------------------------------------------------------------------
	SNDADLLAPI void SNDACALL sdoaReleaseIdwStore(IN IIdwStore* pIdwStore);

	//----------------------------------------------------------------------------------------
	// 控件所涉及到的渲染接口，通常情况下，如果应用程序需要根据自己的需要实现界面，那么它必须
	// 实现 IIdwRender的几个渲染接口
	//----------------------------------------------------------------------------------------
	interface IIdwRender
	{
		//----------------------------------------------------------------------------------------
		//名称: SetEdit
		//描述: 设置渲染引擎对应的控件
		//参数:	
		//		@param	pIdwEdit					控件指针
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) SetEdit(IN IIdwEdit* pIdwEdit) PURE;

		//----------------------------------------------------------------------------------------
		//名称: OnGetBorderSize
		//描述: 返回边框的宽度。如果要设置边框的宽度，只需要直接返回就可以了。
		//返回:	
		//		@param	返回当前控件的边框的宽度
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(INT) OnGetBorderSize() PURE;

		//----------------------------------------------------------------------------------------
		//名称: OnDrawBorder
		//描述: 对应的是WM_NCPAINT消息，当绘制边框的时候该接口将被调用。应用程序
		//		可以实现自己的边框绘制函数。比如当鼠标进入时候显示一种边框，而当失去焦点
		//		时候又绘制另外一种边框
		//参数:	
		//		@param	dc					绘制边框的dc环境
		//返回: 如果OnPaint返回TRU
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) OnDrawBorder(IN HDC dc) PURE;

		//----------------------------------------------------------------------------------------
		//名称: OnDrawBackground
		//描述: 对应的是WM_ERASEBACKGROUND消息，当控件响应WM_ERASEBACKGROUND消息的时候
		//OnDrawBackground函数将被调用。该接口用来绘制控件的背景
		//参数:	
		//		@param	dc					编辑控件的dc环境供进行绘制
		//返回: 具体的返回码
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) OnDrawBackground(IN HDC dc) PURE;

		//----------------------------------------------------------------------------------------
		//名称: OnDrawCaret
		//描述: 提供应用程序以机会来修改光标的操作。在创建光标后，应用程序无需调用
		//		ShowCaret()进行显示。
		//参数:	
		//		@param	dc					绘制光标的设备环境。
		//返回: 具体的返回码
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) OnDrawCaret(IN HDC dc) PURE;

		//----------------------------------------------------------------------------------------
		//名称: OnSetFocus
		//描述: 对应的是WM_SET_FOCUS消息，当控件获取焦点的时候将会触发该接口，之所
		//		以提供OnSetFocus和OnKillFocus，是因为一些引用希望在获取焦点和失去焦点
		//		的时候能够增加一些自定义的行为，比如切换控件的背景等等
		//返回: 具体的返回码
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) OnSetFocus() PURE;

		//----------------------------------------------------------------------------------------
		//名称: OnKillFocus
		//描述: 对应的是WM_KILL_FOCUS消息，当控件失去焦点的时候将会触发该接口，之所
		//		以提供OnSetFocus和OnKillFocus，是因为一些引用希望在获取焦点和失去焦点
		//		的时候能够增加一些自定义的行为，比如切换控件的背景等等
		//返回: 具体的返回码
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) OnKillFocus() PURE;

		//----------------------------------------------------------------------------------------
		//名称: OnMouseMove
		//描述: 对应的是WM_MOUSE_MOVE消息，当鼠标移动到控件之上的时候将触发该事件
		//返回: 具体的返回码
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) OnMouseMove(IN UINT nFlags, IN POINT point) PURE;

		//----------------------------------------------------------------------------------------
		//名称: OnMouseLeave
		//描述: 对应的是WM_MOUSE_LEAVE消息，当鼠标离开鼠标的时候将触发该消息
		//返回: 具体的返回码
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) OnMouseLeave() PURE;

		//----------------------------------------------------------------------------------------
		//名称: OnOpenCapital
		//描述: 如果当前打开了大写输入键，则会调用该接口。有的应用程序需要在大写输入的时候进行
		//			必要的提示，因此外部程序必须有机会获知该事件
		//参数:	
		//		@param	bOpenCapital					当前是否打开了大写键，TRUE表示已经打开，否则
		//			表示关闭
		//返回: 具体的返回码
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) OnOpenCapital(BOOL bOpenCapital) PURE;

 		//----------------------------------------------------------------------------------------
		//名称: OnEscKeyDown
		//描述: 如果在控件中输入了ESC的键，则允许用户进行处理。该接口允许用户对在密码控件中
		//			输入ESC键做出响应。有的时候应用程序需要监控控件中的ESC键，然后执行退出操作。
		//			此时应用程序就必须重载该接口。
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(ERValue) OnEscKeyDown() PURE;

		//----------------------------------------------------------------------------------------
		//名称: OnTabKeyDown
		//描述: 如果在控件中输入了TAB的键，则允许用户进行处理。	该接口允许用户对在密码控件中
		//			输入Tab键做出响应。有的时候应用程序需要监控控件中的TAB键输入，一旦在密码控件
		//			中输入TAB，则需要切换到下一个控件。通过IIdwEdit中的SetTabOrder可以设置控件的
		//			下一个Tab顺序。
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(ERValue) OnTabKeyDown() PURE;

		//----------------------------------------------------------------------------------------
		//名称: OnEnterKeyDown
		//描述: 如果在控件中输入了TAB的键，则允许用户进行处理。	该接口允许用户对在密码控件中
		//			输入回车键做出响应。有的时候应用程序需要监控控件中的回车键输入以便执行类似于
		//			确定的操作，此时就必须重载该接口。。
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(ERValue) OnEnterKeyDown() PURE;

		//----------------------------------------------------------------------------------------
		//名称: OnGetRenderCode
		//描述: 当前渲染引擎需要处理绘制的类型
		//返回:	返回为RC_XXX类型定义
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(INT) OnGetRenderCode() PURE;

 		//----------------------------------------------------------------------------------------
		//名称: OnPaintEx
		//描述: 用户全自定义绘制接口，大部分用户不会使用到该接口，如果用户需要实现
		//		下面的特殊需求，则需要实现该接口：
		//		1、绘制编辑框中的*密码，如果想换成位图，或者其余的自定的圆点
		//		2、绘制编辑框中的光标
		//参数:
		//		@param	dc								绘制的dc设备环境
		//		@param	nTextNum					当前总的字符数目
		//		@param	nCursorPos				当前光标的位置，即在第几个字符后面
		//返回:
		//		如果用户不需要进行自绘则必须返回DECLINED。如果需要绘制，则返回OK
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(ERValue) OnPaintEx(IN HDC dc, IN INT nTextNum,IN INT nCursorPos) PURE;

		//----------------------------------------------------------------------------------------
		//名称: OnGetCharPosByXY
		//描述: 对于像AirPlay这样的一些应用程序，他们的光标也是完全进行自绘，而不是使用系统提供的
		//			字符，比如*或者圆点符号。因此一个字符的宽度只有AirPlay应用程序自身才知道。因此，
		//			对于一些操作，比如在编辑框中按下鼠标，如果需要将光标定位到合适的位置，则必须由
		//			调用者来进行通知。
		//参数:
		//		@param	x								鼠标按下的x坐标
		//		@param	y								鼠标按下的y坐标
		//返回:
		//		如果xy坐标在编辑框的有效点击范围内，则返回在第几个字符之后。该位置是相对于整个
		//		编辑框内的字符串而言。
		//		如果xy在无效范围之内，则返回-1,此时IDW不需要做任何的处理
		//		如果应用程序不需要接管该接口，则直接返回-2。
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(int) OnGetCharPosByXYEx(int x, int y) PURE;
	};


	//----------------------------------------------------------------------------------------
	// 控件所涉及到的渲染接口
	//----------------------------------------------------------------------------------------
	interface IIdwEdit
	{
		//----------------------------------------------------------------------------------------
		//名称: Create
		//描述: 在给定的区域内创建一个IIdwEdit控件
		//参数:	
		//		@param	rc					控件所占据的矩形的区域
		//		@param	hParentWnd	父窗口的句柄
		//		@param	uId				当前控件的ID
		//		@param	pRender		当前控件需要使用的渲染引擎，如果为NULL，
		//						则使用默认的引擎进行渲染
		//返回: 如果创建成功，返回true，否则返回false
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) Create(IN const RECT& rc,IN  HWND hParentWnd, IN UINT uId, 
			IN IIdwRender* pRender = NULL) PURE;

		//----------------------------------------------------------------------------------------
		//名称: CreateFromEdit
		//描述: 使用屏幕上现有的Edit的位置创建当前的密码框
		//参数:	
		//		@param	nEditId		Edit控件的ID
		//		@param	hParentWnd	父窗口的句柄
		//		@param	pRender		当前控件需要使用的渲染引擎，如果为NULL，
		//						则使用默认的引擎进行渲染
		//返回: 如果创建成功，返回true，否则返回false。创建成功后，控件的ID为nStaticId
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) CreateFromEdit(IN UINT nEditId, IN HWND hParentWnd, 
			IN IIdwRender* pRender = NULL) PURE;

		//----------------------------------------------------------------------------------------
		//名称: Release
		//描述: 释放控件
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void)  Release() PURE;

		//----------------------------------------------------------------------------------------
		//名称: GetRender
		//描述: 获取与当前Edit关联的渲染引擎
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(IIdwRender*) GetRender() PURE;

		//----------------------------------------------------------------------------------------
		//名称: SetLimitText	 / GetLimitText
		//描述: 设置和获取Edit中允许输入的文字的最大数目
		//参数:	
		//		@param	nLimit			允许输入的文本的最大数目，-1表示不受限制
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) SetLimitText(IN int nLimit = -1) PURE;
		SNDAMETHOD(int) GetLimitText() PURE;

		//----------------------------------------------------------------------------------------
		//名称: SetFontSize	/ GetFontSize
		//描述: 设置和获取Edit中字体的大小
		//参数:	
		//		@param	nFontSize			字体的大小，默认是12
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) SetFontSize(IN int nFontSize = 12) PURE;
		SNDAMETHOD(int) GetFontSize() PURE;

		//----------------------------------------------------------------------------------------
		//名称: SetFontColor / GetFontColor
		//描述: 设置和获取字体的颜色
		//参数:	
		//		@param	nFontColor			字体的颜色，默认为黑色，即0x000000
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) SetFontColor(IN int nFontColor = 0x000000) PURE;
		SNDAMETHOD(int) GetFontColor() PURE;

		//----------------------------------------------------------------------------------------
		//名称: SetFontColor
		//描述: 设置字体的颜色
		//参数:	
		//		@param	pszColor			颜色字符串类型，可以支持的颜色格式包括：
		//		#RGB		则自动补全为#FFRRGGBB，
		//		#ARGB		则自动补全为#AARRGGBB
		//		#RRGGBB		则自动补全为#FFRRGGBB,
		//		#AARRGGBB	前2个AA为Alpha通道值，透明度
		//返回: 设置成功，返回true，否则返回false
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) SetFontColor(IN const wchar_t* pszColor) PURE;

		//----------------------------------------------------------------------------------------
		//名称: SetBorderSize	/ GetBorderSize
		//描述: 设置和获取边框的粗细度
		//参数:	
		//		@param	nBorderSize			边框的粗细
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) SetBorderSize(IN int nBorderSize = 2) PURE;
		SNDAMETHOD(int) GetBorderSize() PURE;

 		//----------------------------------------------------------------------------------------
		//名称: SetBorderColor/	GetBorderColor
		//描述: 设置和获取边框的颜色
		//参数:	
		//		@param	nBorderColor			边框的颜色
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) SetBorderColor(IN int nBorderColor = 0x000000) PURE;
		SNDAMETHOD(int) GetBorderColor() PURE;

		//----------------------------------------------------------------------------------------
		//名称: SetBackgroundColor
		//描述: 设置背景色
		//参数:	
		//		@param	nBkgColor			背景色的RGB值
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) SetBackgroundColor(IN int nBkgColor) PURE;
		SNDAMETHOD(int) GetBackgroundColor() PURE;

		//----------------------------------------------------------------------------------------
		//名称: SetTabOrder
		//描述: 设置Tab顺序
		//参数:	
		//		@param	hWndAfter			当前的Tab顺序位于hWndAfter控件之后
		//返回:
		//		如果设置成功，则返回TRUE，否则返回FALSE
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) SetTabOrder(IN HWND hWndAfter) PURE;

		//----------------------------------------------------------------------------------------
		//名称: SetFocus
		//描述: 设置当前的密码控件为获取焦点状态
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) SetFocus() PURE;
		SNDAMETHOD(BOOL) KillFocus() PURE;

		//----------------------------------------------------------------------------------------
		//名称: GetClientRect
		//描述: 获取控件的客户端区域
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(RECT) GetClientRect() PURE;

		//----------------------------------------------------------------------------------------
		//名称: GetWindowRect
		//描述: 获取控件的整个窗口区域
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(RECT) GetWindowRect() PURE;

		//----------------------------------------------------------------------------------------
		//名称: GetWindowDC
		//描述: 获取控件的整个窗口区域的DC
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(HDC) GetWindowDC() PURE;

		//----------------------------------------------------------------------------------------
		//名称: GetClientDC
		//描述: 获取控件的客户端区域的DC
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(HDC) GetClientDC() PURE;

		//----------------------------------------------------------------------------------------
		//名称: GetHWnd
		//描述: 获取编辑框的句柄
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(HWND) GetHWnd() PURE;

		//----------------------------------------------------------------------------------------
		//名称: Invalidate
		//描述: 当编辑框的属性发生变化的时候，必须调用该接口进行刷新
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) Invalidate() PURE;

		//----------------------------------------------------------------------------------------
		//名称: ClearPassword
		//描述: 清空密码框中的密码
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) ClearPassword() PURE;

		//----------------------------------------------------------------------------------------
		//名称: GetEncryptedText
		//描述: 获取加密后的密文
 		//参数:	
		//		@param	nLength			传入的密码的长度。如果该长度不够，nLength在返回的时候标记
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(void) GetEncryptedText(IN BYTE*	pszEntryptedText, IN OUT UINT& nLength) PURE;

		//----------------------------------------------------------------------------------------
		//名称: IsEmpty
		//描述: 当前密码是否是空密码。如果是则返回TRUE，否则返回FALSE
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) IsEmpty() PURE;

		//----------------------------------------------------------------------------------------
		//名称: Show
		//描述: 显示或者隐藏当前控件
		//参数:	
		//		@param	bShow			TRUE表示显示当前控件，FALSE表示隐藏当前控件
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) Show(BOOL bShow) PURE;

		//----------------------------------------------------------------------------------------
		//名称: ShowPassword
		//描述: 如果选择了记录密码，当选择某个账号的时候，调用该接口取出对应的密码，并在密码框中进行显示。
		//			为了安全起见，密码框中统一显示是个圈圈字符。
		//参数:	
		//		@param	szSndaAccount			需要显示密码的盛大帐号
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) ShowPassword(IN const wchar_t* szSndaAccount) PURE;

		//----------------------------------------------------------------------------------------
		//名称: IsRememberPasswordTextChanged
		//描述: 用户是否对记住的密码进行过修改，比如输入新的字符或者进行了删除等等。
		//----------------------------------------------------------------------------------------
		SNDAMETHOD(BOOL) IsRememberPasswordTextChanged() PURE;
	};

	//----------------------------------------------------------------------------------------
	//名称: sdoaCreateIdwEdit
	//描述: 创建一个IdwEdit安全控件接口。
	//参数:	
	//		@param	pAppKey			当前应用的AppKey，该ID在申请的时候由服务器分配的App Key
	//----------------------------------------------------------------------------------------
	SNDADLLAPI IIdwEdit* SNDACALL sdoaCreateIdwEdit();

	//---------------------------------------------------------------------------------------------------
	//名称: sdoaReleaseIdwEdit
	//描述: 通过sdoaCreateIdwEdit创建的对象必须通过sdoaReleaseIdwEdit释放，否则
	// 会造成内存泄露。
	//参数:	
	//		@param	pIdwEdit			需要被释放的Edit控件
	//----------------------------------------------------------------------------------------
	SNDADLLAPI void SNDACALL sdoaReleaseIdwEdit(IN IIdwEdit* pIdwEdit);
}